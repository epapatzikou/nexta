// TLite.cpp : Defines the class behaviors for the application.
//
//  Portions Copyright 2010 Xuesong Zhou (xzhou99@gmail.com)

//   If you help write or modify the code, please also list your names here.
//   The reason of having Copyright info here is to ensure all the modified version, as a whole, under the GPL 
//   and further prevent a violation of the GPL.

// More about "How to use GNU licenses for your own software"
// http://www.gnu.org/licenses/gpl-howto.html


//    This file is part of NeXTA Version 3 (Open-source).

//    NEXTA is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.

//    NEXTA is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License
//    along with NEXTA.  If not, see <http://www.gnu.org/licenses/>.

#include "stdafx.h"
#include "TLite.h"
#include "MainFrm.h"

#include "ChildFrm.h"
#include "TLiteDoc.h"
#include "TLiteView.h"
#include "GLView.h"
#include "TSView.h"
#include "DlgMOE.h"
#include "DlgPathMOE.h"
#include "DlgMainTemplate.h"

bool b_gStaticAssignmentFlag = true;

eVisulizationTemplate g_VisulizationTemplate;

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

extern CDlgMOE *g_LinkMOEDlg;
extern CDlgPathMOE	*g_pPathMOEDlg;


// CTLiteApp

BEGIN_MESSAGE_MAP(CTLiteApp, CWinApp)
	ON_COMMAND(ID_APP_ABOUT, &CTLiteApp::OnAppAbout)
	// Standard file based document commands
	ON_COMMAND(ID_FILE_NEW, &CWinApp::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, &CWinApp::OnFileOpen)
	ON_COMMAND(ID_FILE_OPEN, &CTLiteApp::OnFileOpen)
	ON_COMMAND(ID_FILE_OPEN_NEW_DOC, &CTLiteApp::OnFileOpenNewDoc)
END_MESSAGE_MAP()




// CTLiteApp construction

CTLiteApp::CTLiteApp()
{
	m_pTemplateGLView = false;
	m_pTemplateTimeTableView = false;

}


// The one and only CTLiteApp object

CTLiteApp theApp;


// CTLiteApp initialization

BOOL CTLiteApp::InitInstance()
{
	CWinApp::InitInstance();

	// Standard initialization
	SetRegistryKey(_T("NeXTA"));
	LoadStdProfileSettings(4);  // Load standard INI file options (including MRU)

	int running_model = (int)(g_GetPrivateProfileFloat("mode", "traffic_assignment", 1, "NeXTASettings.ini"));	

	if(running_model == 1)
		g_VisulizationTemplate  =  e_traffic_assignment;
	else
		g_VisulizationTemplate  =  e_train_scheduling;


	if(g_VisulizationTemplate == e_traffic_assignment)  // traffic assignment
	{
	m_pDocTemplate2DView = new CMultiDocTemplate(IDR_TLiteTYPE1,
		RUNTIME_CLASS(CTLiteDoc),
		RUNTIME_CLASS(CChildFrame), // custom MDI child frame
		RUNTIME_CLASS(CTLiteView));
	if (!m_pDocTemplate2DView)
		return FALSE;
	AddDocTemplate(m_pDocTemplate2DView);

	// add second Doc template for GLView

    //The AddDocTemplate() call generated by AppWizard established the primary document/frame/view combination for the application that is effective 
	//when the program starts. 
	//The template object below is a secondary template that can be activated in response to the New GLView Window menu item.

	m_pTemplateGLView = new CMultiDocTemplate(
    IDR_TLiteTYPE1,
    RUNTIME_CLASS(CTLiteDoc),
    RUNTIME_CLASS(CChildFrame),
    RUNTIME_CLASS(CGLView));

	}

	if(g_VisulizationTemplate == e_train_scheduling)  // train timetabling template
	{
	m_pDocTemplate2DView = new CMultiDocTemplate(IDR_TLiteTYPE2,
		RUNTIME_CLASS(CTLiteDoc),
		RUNTIME_CLASS(CChildFrame), // custom MDI child frame
		RUNTIME_CLASS(CTLiteView));
	if (!m_pDocTemplate2DView)
		return FALSE;
	AddDocTemplate(m_pDocTemplate2DView);

	// add second Doc template for GLView

    //The AddDocTemplate() call generated by AppWizard established the primary document/frame/view combination for the application that is effective 
	//when the program starts. 
	//The template object below is a secondary template that can be activated in response to the New GLView Window menu item.

	m_pTemplateGLView = new CMultiDocTemplate(
    IDR_TLiteTYPE2,
    RUNTIME_CLASS(CTLiteDoc),
    RUNTIME_CLASS(CChildFrame),
    RUNTIME_CLASS(CGLView));

	m_pTemplateTimeTableView = new CMultiDocTemplate(
    IDR_TLiteTYPE2,
    RUNTIME_CLASS(CTLiteDoc),
    RUNTIME_CLASS(CChildFrame),
    RUNTIME_CLASS(CTimeSpaceView));
	}

	// create main MDI Frame window
	CMainFrame* pMainFrame = new CMainFrame;
	if (!pMainFrame || !pMainFrame->LoadFrame(IDR_MAINFRAME))
	{
		delete pMainFrame;
		return FALSE;
	}
	m_pMainWnd = pMainFrame;
	// call DragAcceptFiles only if there's a suffix
	//  In an MDI app, this should occur immediately after setting m_pMainWnd

	// Parse command line for standard shell commands, DDE, file open
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);


	// Dispatch commands specified on the command line.  Will return FALSE if
	// app was launched with /RegServer, /Register, /Unregserver or /Unregister.
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	GetCurrentDirectory(MAX_PATH,pMainFrame->m_CurrentDirectory);
	// The main window has been initialized, so show and update it
	pMainFrame->ShowWindow(SW_SHOWMAXIMIZED);
	pMainFrame->UpdateWindow();

	return TRUE;
}



// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// Dialog Data
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support

// Implementation
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()

// App command to run the dialog
void CTLiteApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}


// CTLiteApp message handlers


void CTLiteApp::OnFileOpen()
{
   CFileDialog dlg(TRUE, 0, 0, OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
		   _T("NeXTA Project (*.dlp)|*.dlp|"));
   if(dlg.DoModal() == IDOK)
   {
      POSITION p = m_pDocManager->GetFirstDocTemplatePosition();
      CDocTemplate* pTemplate = m_pDocManager->GetNextDocTemplate(p);
      CTLiteDoc* pDoc = (CTLiteDoc*)pTemplate->OpenDocumentFile(0);
      pDoc->OnOpenDocument(dlg.GetPathName());
   }
}

void CTLiteApp::OnFileOpenNewDoc()
{
	OnFileOpen();
}


int CTLiteApp::ExitInstance()
{
	delete m_pTemplateGLView;
	delete m_pTemplateTimeTableView;

	return CWinApp::ExitInstance();
}


void CTLiteApp::UpdateAllViews()
{
	POSITION posTempl;
	POSITION posDoc;

	CMultiDocTemplate *pDocTempl;
	CDocument *pDoc;


	posTempl = GetFirstDocTemplatePosition(); 

	while(posTempl != NULL)
	{
		pDocTempl = (CMultiDocTemplate *) GetNextDocTemplate(posTempl); // first TEMPLATE
		posDoc = pDocTempl->GetFirstDocPosition();

		while(posDoc != NULL)
		{
			pDoc = pDocTempl->GetNextDoc(posDoc); 
			pDoc->UpdateAllViews (0);

		}
	} 


	if(g_LinkMOEDlg  && g_LinkMOEDlg ->GetSafeHwnd ())
	{
		g_LinkMOEDlg->Invalidate (true);
	}


	if(g_pPathMOEDlg  && g_pPathMOEDlg ->GetSafeHwnd ())
	{
		g_pPathMOEDlg->InsertPathMOEItem();
		g_pPathMOEDlg->Invalidate (true);
	}	
}
